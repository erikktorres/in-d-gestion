/*
 * == BSD2 LICENSE ==
 * Copyright (c) 2014, Tidepool Project
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the associated License, which is identical to the BSD 2-Clause
 * License as published by the Open Source Initiative at opensource.org.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the License for more details.
 * 
 * You should have received a copy of the License along with this program; if
 * not, you can obtain one from Tidepool Project at tidepool.org.
 * == BSD2 LICENSE ==
 */
'use strict';

// Require this to get things registered with rx
require('../rx');

var _ = require('lodash');
var except = require('amoeba').except;
var moment = require('moment');

var assignId = require('./../assignId.js');
var bolusJoin = require('./bolusJoiner.js');
var eventParser = require('./eventParser.js');
var generateBasals = require('./generateBasals.js');
var misc = require('../misc.js');
var parsing = require('../parsing.js');
var settingsJoin = require('./settingsJoiner.js');
var statusJoin = require('./statusJoin.js');
var tempBasalJoin = require('./tempBasalJoin.js');

function identity(e) {
  return e;
}

function omitNullFields(e) {
  return _.omit(e, function (element) { return element == null; });
}

function convertRawValues(e) {
  var RAW_VALUES = e['Raw-Values'];
  if (RAW_VALUES == null) {
    return e;
  }

  var rawVals = {};
  var keyValSplits = RAW_VALUES.split(',');
  for (var i = 0; i < keyValSplits.length; ++i) {
    var keyVal = keyValSplits[i].trim().split('=');
    if (keyVal.length !== 2) {
      throw except.ISE('keyVal didn\'t split on \'=\' well[%s], input was[%s]', keyValSplits[i], RAW_VALUES);
    }
    rawVals[keyVal[0]] = keyVal[1];
  }

  e['Raw-Values'] = rawVals;
  return e;
}

/**
 * Parses the stream.
 *
 * Is passed in a configFn which is a function that is lazily executed for access to a config object.
 * This mechanism allows us to pull some values from the stream of data, yet still
 * treat it as "configuration" from the standpoint of the code.
 *
 * The configuration generated by `configFn` should be an object with fields
 *
 * * `startTime` - the first known timestamp of the data, this is used to "back-date" some objects that cover
 * the entire length of the data provided *
 *
 * @param configFn A function that, when executed, will return a configuration object
 * @returns {Function} a function that modifies an Observable to parse out medtronic datums
 */
module.exports = function (configFn) {
  var uploadIdAndSeqNumCompareFn = misc.buildSortCompareFn(['uploadId', parsing.asNumber('uploadSeqNum')]);

  return function (observable) {
    return observable
      .map(omitNullFields)
      .map(convertRawValues)
      .map(misc.addDeviceTimeFn('Timestamp', 'MM/DD/YY HH:mm:ss'))
      .splitMerge(function(e){
                    return e['Raw-Upload ID'];
                  },
                  function(key, observable) {
                    var minTimestamp = moment('3000-01-01T00:00:00.000Z');
                    var configFnOverride = function() {
                      return _.assign({}, configFn(), { startTime: minTimestamp });
                    };

                    function maintainMinTimestamp(e) {
                      if (e.deviceTime.isBefore(minTimestamp)) {
                        minTimestamp = e.deviceTime.clone();
                      }
                      return e;
                    }

                    return observable
                      .keep(eventParser)
                      .map(maintainMinTimestamp)
                      // Carelink data flows based on a sequence id, not based on timestamp.  In order to
                      // process the correlation of some of these events, we must re-sort the data accordingly.
                      // Sorting requires a full materialization of the stream in memory.  In order to decrease
                      // the memory requirements, we fork the streams into just the events that are required
                      // for the sorted processing and let the others flow through as normal.
                      .splitMerge(function (e) {
                                    switch(e.type) {
                                      case 'bolus':
                                      case 'wizard':
                                        return 'bolusy';
                                      case 'settingsPart':
                                        return 'settings';
                                      case 'basal':
                                      case 'deviceMeta':
                                        return e.type;
                                      default:
                                        return 'flow-through';
                                    }
                                  },
                                  {
                                    basal: function(observable) {
                                      return observable
                                        .map(misc.convertDeviceTimeToString)
                                        .sort(misc.buildSortCompareFn(['deviceTime']))
                                        .map(assignId)
                                        .map(misc.addDeviceTimeFn())
                                        .map(function(e) {
                                               if (e.deliveryType !== 'scheduled') {
                                                 return e;
                                               }

                                               e.deviceTime = e.deviceTime.clone().startOf('day').add(e.startTime);
                                               delete e.startTime;
                                               return e;
                                             })
                                        .apply(tempBasalJoin)
                                        .map(maintainMinTimestamp);
                                    },
                                    bolusy: function(observable) {
                                      return observable
                                        .sort(uploadIdAndSeqNumCompareFn)
                                        .apply(bolusJoin);
                                    },
                                    deviceMeta: function(observable) {
                                      return observable
                                        .map(misc.convertDeviceTimeToString)
                                        .map(assignId)
                                        .map(misc.addDeviceTimeFn())
                                        .apply(statusJoin);
                                    },
                                    'flow-through': identity,
                                    settings: function (observable) {
                                      return observable
                                        .sort(uploadIdAndSeqNumCompareFn)
                                        .apply(settingsJoin(configFnOverride));
                                    }
                                  })
                      .splitMerge(function(e) {
                                    switch(e.type) {
                                      case 'settings':
                                      case 'basal':
                                        return 'settingsAndBasal';
                                      default:
                                        return 'flow-through';
                                    }
                                  },
                                  {
                                    'flow-through': identity,
                                    settingsAndBasal: function(observable) {
                                      return observable
                                        .sort(misc.buildSortCompareFn(['deviceTime', { spec: 'type', order: 'desc' }]))
                                        .apply(generateBasals);
                                    }
                                  });
                  })
      .splitMerge(function(e){
                    return e.deviceId;
                  },
                  function(key, observable) {
                    return observable
                      .splitMerge(function(e) {
                                    switch(e.type) {
                                      case 'deviceMeta':
                                        return e.type;
                                      default:
                                        return 'flow-through';
                                    }
                                  },
                                  {
                                    deviceMeta: function(observable) {
                                      return observable
                                        .sort(misc.buildSortCompareFn('deviceTime'))
                                        .apply(statusJoin);
                                    },
                                    'flow-through': identity
                                  });
                  })
      .map(misc.convertDeviceTimeToString)
      .map(assignId)
      .map(misc.attachFieldFn('source', 'carelink'));
  };
};
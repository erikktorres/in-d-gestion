/*
 * == BSD2 LICENSE ==
 * Copyright (c) 2014, Tidepool Project
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the associated License, which is identical to the BSD 2-Clause
 * License as published by the Open Source Initiative at opensource.org.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the License for more details.
 * 
 * You should have received a copy of the License along with this program; if
 * not, you can obtain one from Tidepool Project at tidepool.org.
 * == BSD2 LICENSE ==
 */

// Require this to get things registered with rx
require('../rx');

var _ = require('lodash');
var except = require('amoeba').except;
var moment = require('moment');
var rx = require('rx');

var assignId = require('./assignId.js');
var bolusJoin = require('./bolusJoiner.js');
var eventParser = require('./eventParser.js');
var misc = require('../misc.js');
var parsing = require('../parsing.js');
var settingsJoin = require('./settingsJoiner.js');

function omitNullFields(e) {
  return _.omit(e, function (element) { return element == null; });
}

function convertRawValues(e) {
  var RAW_VALUES = e['Raw-Values'];
  if (RAW_VALUES == null) {
    return e;
  }

  var rawVals = {};
  var keyValSplits = RAW_VALUES.split(',');
  for (var i = 0; i < keyValSplits.length; ++i) {
    var keyVal = keyValSplits[i].trim().split('=');
    if (keyVal.length !== 2) {
      throw except.ISE('keyVal didn\'t split on = well[%s], input was[%s]', keyValSplits[i], RAW_VALUES);
    }
    rawVals[keyVal[0]] = keyVal[1];
  }

  e['Raw-Values'] = rawVals;
  return e;
}

function addSource(company) {
  return function (e) {
    e.source = company;
    return e;
  }
}

var typesRequiringSort = {
  bolus: '',
  settingsPart: '',
  wizard: ''
};
function typeRequiresSort(e) {
  return typesRequiringSort[e.type] != null;
}

/**
 * Parses the stream.
 *
 * Is passed in a configFn which is a function that is lazily executed for access to a config object.
 * This mechanism allows us to pull some values from the stream of data, yet still
 * treat it as "configuration" from the standpoint of the code.
 *
 * The configuration generated by `configFn` should be an object with fields
 *
 * * `startTime` - the first known timestamp of the data, this is used to "back-date" some objects that cover
 * the entire length of the data provided *
 *
 * @param configFn A function that, when executed, will return a configuration object
 * @returns {Function} a function that modifies an Observable to parse out medtronic datums
 */
module.exports = function(configFn) {
  return function (observable) {
    var commonProcessing = observable
      .map(omitNullFields)
      .map(convertRawValues)
      .map(misc.addDeviceTimeFn('Timestamp', 'MM/DD/YY HH:mm:ss'))
      .keep(eventParser)
      .publish();

    // Carelink data flows based on a sequence id, not based on timestamp.  In order to
    // process the correlation of some of these events, we must re-sort the data accordingly.
    // Sorting requires a full materialization of the stream in memory.  In order to decrease
    // the memory requirements, we fork the streams into just the events that are required
    // for the sorted processing and let the others flow through as normal.
    var normalFlow = rx.Observable.create(commonProcessing.subscribe.bind(commonProcessing))
      .filter(function(e) { return !typeRequiresSort(e) });

    var sortedFlow = rx.Observable.create(commonProcessing.subscribe.bind(commonProcessing))
      .filter(typeRequiresSort)
      .sort(misc.buildSortCompareFn([parsing.extract('uploadId'), parsing.asNumber('uploadSeqNum')]))
      .apply(bolusJoin)
      .apply(settingsJoin(configFn));

    commonProcessing.connect();

    return rx.Observable.merge(normalFlow, sortedFlow)
      .apply(assignId)
      .map(addSource('carelink'));
  };
};